#!/bin/bash
#
# Siddharth Dushantha 2020
# Paul Fox 2025
# See MIT license, below.
#
# Dependencies: nsxiv, sxiv, or feh, and imagemagick, xdotool, fzf

# debug=true

usage()
{
printf "%s" "\

usage:

 fontpreview [options] <fontfile>
    to preview a font from its file (.otf, .ttf)

 fontpreview [options] <fontfile> <imagefile>
    to create an image from the preview

 fontpreview [options]
    interactive use

 Options:
   -text                   text to be previewed
   -font-size              font size for the preview window
   -no-preview-header      don't include the font name in the preview
   -multi-viewer           spawn new viewer per font.  (clean up manually.)
   -bg-color <colorspec>   background color for the preview window
   -fg-color <colorspec>   foreground color for the preview window
   -size WxH               width and height in pixels (overrides autosizing)
   -position +X+Y/-X-Y     position, as in X geometry (see \"man X\")

   All options can be shortened to the first character of each word in
       the option:  e.g., '-fs' for '-font-size', or '-t' for '-text'.
       (Or, reduced to the the shortest unique prefix.)
   Either '-' or '--' can introduce any option.
"
}

# Debug support:
# Save a copy of original stderr on fd 3 for fzf to use.
# fd 4 will point at either /dev/null or stderr, depending on whether
# we're tracing.
exec 3>&2
exec 4>/dev/null  # dump fd 4, except when debugging (see below)
[[ $debug ]] && { exec 2>/tmp/fontpreview.log ; set -x; exec 4>&2;  }


# Use mktemp to create a temporary directory that won't
# collide with temporary files of other application.
fp_dir="$(mktemp -d "${TMPDIR:-/tmp}/fontpreview_dir.XXXXXXXX")" || exit

preview_image_name="$fp_dir/fontpreview"    # .png suffix added later

# Default values, mostly changeable from command line, and
# certainly from user config file
autosize=true   # we autosize the window unless its overridden with --size
preview_size=530x730
preview_pos=;   # window manager chooses a position by default
font_size=38      # points
fontname_size=30  # points
bg_color="#ffffff"
fg_color="#000000"
preview_text=\
'ABCDEFGHIJKLM\n\
 NOPQRSTUVWXYZ\n\
 abcdefghijklm\n\
 nopqrstuvwxyz\n\
 1234567890\n\
 !@$\\/%%(){}[]\n\
 .,:;=+>--<__\n\
 ({[ -~\n\
 DO08B 1Ili\n\
 098756938217\n\
 AR 9gq oa\n\
 السلام عليكم'
preview_include_fontname=true
fontname_wrap=30  # width in characters to which we wrap the name in the header

# let user override the defaults above
source ~/.fontpreview 2>&4

on_exit()
{
    # kill the image viewer
    test "$viewerpid" && kill -TERM $viewerpid 2>/dev/null

    # Delete tempfiles, so we don't leave useless files behind.
    rm -rf "$fp_dir"

    echo
    exit
}

wrapfontname()
{
    if [[ -f "$1" ]]
    then  # if it's a filename, just fold the basename
        fold -w $fontname_wrap <<<"${1##*/}"
    else # otherwise, change '-' to space and wrap on spaces
        sed -e 's/-/ /g' <<<"$1" | fold -s -w $fontname_wrap
    fi
}

generate_preview()
{

    fontspec="$1"
    image="$2"

    autosize_preview

    declare -a headerargs
    if [[ $preview_include_fontname ]]
    then
        wrapped_fontname="$(wrapfontname $fontspec)"
        headerargs=( 
            -gravity north -pointsize $fontname_size
            -font "$fontspec"
            -annotate +0+0 "$wrapped_fontname"
        )
    fi

    tempimage=$fp_dir/tmp-$(basename "$image")

    # Credits: https://bit.ly/2UvLVhM
    $magick -size $preview_size xc:"$bg_color" \
        "${headerargs[@]}" \
        -gravity south \
        -pointsize $font_size \
        -font "$fontspec" \
        -fill "$fg_color" \
        -annotate +0+0 \
            "$preview_text" \
        $tempimage  &&
    mv "$tempimage" "$image"
}

error()
{
    echo fontpreview: "$@" >&2
    [[ $debug ]] && echo fontpreview: "$@" >&3
    exit 1
}

exists()
{
    type -p "$1" &>/dev/null
}

find_tools()
{
    # Checking if needed dependencies are installed
    if exists nsxiv
    then
        viewer=nsxiv
        # -N sets the X11 resource class name, not the title
        vieweropts=( -N "fontpreview" -b )
    elif exists sxiv
    then
        viewer=sxiv
        vieweropts=( -N "fontpreview" -b )
    elif exists feh
    then
        viewer=feh
        vieweropts=( --title "fontpreview" )
    fi
    test "$viewer" || error None of nsxiv, sxiv, or feh is available.

    exists convert && magick=convert
    exists magick && magick=magick
    test "$magick" || error Neither magick nor convert is available.

    exists xdotool || error xdotool not available
    exists fzf || error fzf not available

}

start_viewer()
{
    # put the viewer in its own session, so it will keep running if
    # we suspend.  otherwise it will suspend too, and not be quittable
    vieweropts+=( -g "$preview_size$preview_pos" )
    : ${vieweropts[@]}
    setsid $viewer ${vieweropts[@]} $preview_image_name$newviewer.png &
}

one_shot_commands()
{
    fontfile="$1"
    imagefile="$2"

    test "$fontfile" || return

    # Point a font file to fontpreview and it will preview it.
    #   $ fontpreview fontFile.ttf
    # Or, put the preview into an image file:
    #   $ fontpreview fontFile.ttf /tmp/fontimage.png

    test -r "$fontfile" || error "No such file font file $fontfile"

    if [ -f "$fontfile" ]; then

        if [[ "$imagefile" ]]
        then
            # user-specified image name
            generate_preview "$fontfile" "$imagefile"
            exit
        fi

        # image name in our temp dir
        generate_preview "$fontfile" "$preview_image_name.png"

        start_viewer
        # Don't set viewerpid, else it will be killed when we exit.  (The
        # image will be removed when we exit, but the viewer will already
        # have read it.)

        # exit will remove the file, so give viewer time to read it first
        sleep 0.2
        exit
    fi
}

percent()
{
    [[ $# == 2 ]] || error internal error
    echo $(( $1 * $2 / 100 ))
}

autosize_preview()
{
    [[ $autosize ]] || return

    # this is a pain, because fonts vary greatly in height, even
    # for a given point size.  and their names can be 

    # get the "dimensions" of the preview text
    dims=( $(echo "$preview_text" | wc -l -L) )
    hgt=${dims[0]}  # height (number of lines)
    wid=${dims[1]}  # width (length of longest line)

    prev_h=$(( $hgt * $font_size ))
    prev_w=$(( $wid * $font_size ))

    # some fairly arbitrary padding -- point size apparently doesn't
    # really mean anything, and fonts can vary by at least 30% in
    # inter-line spacing, in my experience.  try Courier vs
    # IBM-Plex-Sans-Condensed-ExtraLight-Italic for example.
    prev_h=$(percent 130 $prev_h)
    prev_w=$(percent 110 $prev_w)

    # so far we've assumed that characters are square.  fix that: 
    # assume that char width is 2/3 of height (western langs only, of
    # course)
    (( prev_w = 2 * prev_w / 3 ))

    # need to add extra for the fontname header height and width
    if [[ $preview_include_fontname ]]
    then
        # we forcibly wrap the fontname, so we know the longest possible line
        hdr_w=$(( fontname_wrap * fontname_size ))
        hdr_w=$(( 2 * hdr_w / 3 ))

        (( prev_w < hdr_w )) && prev_w=$hdr_w

        # assume at most 3 lines of wrapped font name in the header
        hdr_h=$(( 3 * $fontname_size ))
        prev_h=$(($prev_h + $hdr_h))
    fi

    preview_size=${prev_w}x${prev_h}
}

# for some reason using convert to size the text really doesn't work
# well -- it exaggerates like crazy.  which probably means i'm doing
# something wrong.  but also, it's much much slower, and causes a
# noticeable delay, so I'm happy not to use it.
autosize_preview_using_convert()
{
    [[ $autosize ]] || return

    dims=( $(convert -background none -fill black -font $fontspec \
                -pointsize $font_size -size 300x caption:"$preview_text" \
                -trim -format "%h %w\n" info:) )
    hgt=${dims[0]}  # height
    wid=${dims[1]}  # width

    prev_h=$(percent 110 $hgt)
    prev_w=$(percent 110 $wid)

    # need to add extra for the fontname header height and width
    if [[ $preview_include_fontname ]]
    then
        # we forcibly wrap the fontname, so we know the longest possible line
        hdr_w=$(( fontname_wrap * fontname_size ))
        hdr_w=$(( 2 * hdr_w / 3 ))

        (( prev_w < hdr_w )) && prev_w=$hdr_w

        # assume at most 3 lines of wrapped font name in the header
        hdr_h=$(( 3 * $fontname_size ))
        prev_h=$(($prev_h + $hdr_h))
    fi

    preview_size=${prev_w}x${prev_h}
}

main()
{
    # Save the window ID of our terminal window.  We want to be able to
    # bring focus back here, after spawning the viewer.
    xdotool getactivewindow > "$fp_dir/term_win_id"

    qstring=;

    while : loop; do
        # List all fonts imagemagick can find, and pass them to fzf. 
        # fzf's result file will have the query as the first line, and
        # the result as the second.  Or just the query if not found,
        # or neither on failure.
        $magick -list font |
            sed -n -e '/^ *Font: /s///p' |
                fzf --query="$qstring" \
                    -i \
                    --history=$fp_dir/history \
                    --bind 'esc:ignore' \
                    --print-query \
                    --no-color \
                    --prompt="> " 2>&3 \
                            > $fp_dir/result
        fzf_ret=$?

        qstring=$(head -n 1 $fp_dir/result)     # might be empty

        # fzf exit codes:
        # 0      Normal exit
        # 1      No match
        # 2      Error
        # 130    Interrupted with CTRL-C or ESC

        case $fzf_ret in
        130|2)  return ;;   # error or interrupt
        1)      continue ;; # no match -- reuse the previous query string
        esac

        font=$(tail -n 1 $fp_dir/result)

        # make sure there's only one entry for this font in history,
        # and make sure it's at the end.
        grep -iv "^$font$" $fp_dir/history > $fp_dir/history.new
        echo "$font" >> $fp_dir/history.new
        mv  $fp_dir/history.new $fp_dir/history

        # use found result as next query
        qstring="$font"

        generate_preview "$font" "$preview_image_name$newviewer.png"

        if [[ ! $viewerpid ]] || ! kill -0 $viewerpid 2>/dev/null; then
            start_viewer
            if [[ $multi_viewer ]]
            then
                # by not setting $viewerpid, a new viewer will be
                # started for every font selected.  incrementing
                # newviewer will give every viewer a unique filename,
                (( newviewer++ ))
            else
                # this will let us reuse the existing viewer, since
                # we'll have a record that it's alive.  and by not
                # setting $newviewer, the viewer will keep re-reading
                # the same preview file.
                viewerpid=$!
            fi

            # Change focus from nsxiv, back to the terminal window
            # so that user can continue to search for fonts without
            # having to manually change focus back to the terminal window
            xdotool windowfocus "$(cat "$fp_dir/term_win_id")"
        fi
    done
}

process_args()
{
    options=$(getopt \
        --name fontpreview \
        --alternative \
        --options "hm" \
        --longoptions "position:,p:,\
                size:,s:,\
                font-size:,fs:,\
                bg-color:,bg:,bc:,\
                fg-color:,fg:,fc:,\
                text:,t:,\
                no-preview-header,nph,\
                multi-viewer,mv,m,\
                help,h" \
        -- "$@") || error "use -h for help"

    eval set -- "$options"

    while : option loop
    do
        : case "$1"
        case "$1" in
            --position|--p)             preview_pos=$2; shift ;;
            --size|--s)                 preview_size=$2; autosize=; shift ;;
            --font-size|--fs)           font_size=$2; shift ;;
            --bg-color|--bc|--bg)       bg_color=$2; shift ;;
            --fg-color|--fc|--fg)       fg_color=$2; shift ;;
            --text|--t)                 preview_text=$2; shift ;;
            --no-preview-header|--nph)  preview_include_fontname=; ;;
            --multi-viewer|--mv|--m|-m) multi_viewer=true ;;
            --help|--h|-h)              usage; exit ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done
    fileargs=( "$@" )

}

trap on_exit EXIT

find_tools

process_args "$@"

one_shot_commands ${fileargs[0]} ${fileargs[1]}   # might not return

main

exit

#
# MIT License
#
# Copyright (c) 2020 Siddharth Dushantha
# Copyright (c) 2025 Paul Fox
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
