#!/bin/bash
#
# Siddharth Dushantha 2020
# Paul Fox 2025
#
# Dependencies: nsxiv, sxiv, or feh, and imagemagick, xdotool, fzf

show_help()
{
printf "%s" "\

Interactive usage:
    fontpreview [--size WxH ] [--position +X+Y ]
                [--bg-color <colorspec> ] [--fg-color <colorspec> ]
                [--font-size <pixels> ] [--preview-text <text> ]
                [--no-preview-header ] [--multi-viewer ]
 
   --multi-viewer           spawn new viewer per font.  (clean up manually.)
   --size WxH               width and height in pixels
   --position +X+Y/-X-Y     position, in X geometry notation (see \"man X\")
   --font-size              font size for the preview window
   --bg-color,--fg-color    colors for the preview window
   --preview-text           text to be previewed
   --no-preview-header      don't include the font name in the preview

One-shot usage (most interactive options still apply):
    To preview a font from its file (.otf, .ttf, .woff):
        fontpreview <fontfile>
    or to create a preview image from its file:
        fontpreview <fontfile> <imagefile>
"
}

# Debug support:
debug=t;
# save a copy of original stderr for fzf to use, so we can trace on stderr
exec 3>&2
exec 4>/dev/null  # dump fd 4, except when debugging (see below)
[[ $debug ]] && { exec 2>/tmp/fontpreview.log ; set -x; exec 4>&2;  }


# Use mktemp to create a temporary directory that won't
# collide with temporary files of other application.
fp_dir="$(mktemp -d "${TMPDIR:-/tmp}/fontpreview_dir.XXXXXXXX")" || exit

preview_image_name="$fp_dir/fontpreview"    # .png suffix added later
user_config=~/.fontpreview

# Default values, mostly changeable from command line, and
# certainly from user config file
preview_size=530x730
preview_pos=;   # window manager chooses a position by default
font_size=38
fontname_size=30
bg_color="#ffffff"
fg_color="#000000"
preview_fontname=true
preview_text='\
 ABCDEFGHIJKLM\n\
 NOPQRSTUVWXYZ\n\
 abcdefghijklm\n\
 nopqrstuvwxyz\n\
 1234567890\n\
 !@$\\/%%(){}[]\n\
 .,:;=+>--<__\n\
 ({[ -~\n\
 DO08B 1Ili\n\
 098756938217\n\
 AR 9gq oa\n\
 السلام عليكم \
'

# let user override defaults
source $user_config 2>&4

on_exit()
{
    # kill the image viewer
    test "$viewerpid" && kill -TERM $viewerpid 2>/dev/null

    # Delete tempfiles, so we don't leave useless files behind.
    rm -rf "$fp_dir"

    echo
    exit
}

wrapfontname()
{
    if [[ -f "$1" ]]
    then  # if it's a filename, just fold the basename
        fold -w 20 <<<"${1##*/}"
    else # otherwise, change '-' to space and wrap on spaces
        sed -e 's/-/ /g' <<<"$1" | fold -s -w 20
    fi
}

generate_preview()
{

    fontspec="$1"
    image="$2"

    declare -a headerargs
    if [[ $preview_fontname ]]
    then
        wrapped_fontname="$(wrapfontname $fontspec)"
        headerargs=( 
            -gravity north -pointsize $fontname_size
            -font "$fontspec"
            -annotate +0+0 "$wrapped_fontname"
        )
    fi

    tempimage=$fp_dir/tmp-$(basename "$image")

    # Credits: https://bit.ly/2UvLVhM
    $magick -size $preview_size xc:"$bg_color" \
        "${headerargs[@]}" \
        -gravity center \
        -pointsize $font_size \
        -font "$fontspec" \
        -fill "$fg_color" \
        -annotate +0+0 \
            "$preview_text" \
        $tempimage  &&
    mv "$tempimage" "$image"
}

error()
{
    echo fontpreview: "$@" >&2
    exit 1
}

exists()
{
    type -p "$1" &>/dev/null
}

find_tools()
{
    # Checking if needed dependencies are installed
    if exists nsxiv
    then
        viewer=nsxiv
        # -N sets the X11 resource class name, not the title
        vieweropts=( -N "fontpreview" -b )
    elif exists sxiv
    then
        viewer=sxiv
        vieweropts=( -N "fontpreview" -b )
    elif exists feh
    then
        viewer=feh
        vieweropts=( --title "fontpreview" )
    fi
    test "$viewer" || error None of nsxiv, sxiv, or feh is available.

    exists convert && magick=convert
    exists magick && magick=magick
    test "$magick" || error Neither magick nor convert is available.

    exists xdotool || error xdotool not available
    exists fzf || error fzf not available

}

start_viewer()
{
    # put the viewer in its own session, so it will keep running if
    # we suspend.  otherwise it will suspend too, and not be quittable
    setsid $viewer ${vieweropts[@]} $preview_image_name$newviewer.png &
}

one_shot_commands()
{
    fontfile="$1"
    imagefile="$2"

    test "$fontfile" || return

    # Point a font file to fontpreview and it will preview it.
    #   $ fontpreview fontFile.ttf
    # Or, put the preview into an image file:
    #   $ fontpreview fontFile.ttf /tmp/fontimage.png

    test -r "$fontfile" || error "No such file font file $fontfile"

    if [ -f "$fontfile" ]; then

        if [[ "$imagefile" ]]
        then
            # user-specified image name
            generate_preview "$fontfile" "$imagefile"
            exit
        fi

        # image name in our temp dir
        generate_preview "$fontfile" "$preview_image_name.png"

        start_viewer
        # Don't set viewerpid, else it will be killed when we exit.  (The
        # image will be removed when we exit, but the viewer will already
        # have read it.)

        # exit will remove the file, so give viewer time to read it first
        sleep 0.2
        exit
    fi
}

main()
{
    # Save the window ID of our terminal window.  We want to be able to
    # bring focus back here, after spawning the viewer.
    xdotool getactivewindow > "$fp_dir/term_win_id"

    qstring=;

    while : loop; do
        # List all fonts imagemagick can find, and pass them to fzf. 
        # fzf's result file will have the query as the first line, and
        # the result as the second.  Or just the query if not found,
        # or neither on failure.
        $magick -list font |
            sed -n -e '/^ *Font: /s///p' |
                fzf --query="$qstring" \
                    -i \
                    --history=$fp_dir/history \
                    --bind 'esc:ignore' \
                    --print-query \
                    --no-clear \
                    --no-color \
                    --prompt="> " 2>&3 \
                            > $fp_dir/result
        fzf_ret=$?

        qstring=$(head -n 1 $fp_dir/result)     # might be empty

        # fzf exit codes:
        # 0      Normal exit
        # 1      No match
        # 2      Error
        # 130    Interrupted with CTRL-C or ESC

        case $fzf_ret in
        130|2)  return ;;   # error or interrupt
        1)      continue ;; # no match
        esac

        font=$(tail -n 1 $fp_dir/result)
        qstring="$font"
        sed -i -e '$d' $fp_dir/history
        echo "$qstring" >> $fp_dir/history

        generate_preview "$font" "$preview_image_name$newviewer.png"

        if [[ ! $viewerpid ]] || ! kill -0 $viewerpid 2>/dev/null; then
            start_viewer
            if [[ $multi_viewer ]]
            then
                # by not setting $viewerpid, a new viewer will be
                # started for every font selected.  incrementing
                # newviewer will give every viewer a unique filename,
                (( newviewer++ ))
            else
                # this will let us reuse the existing viewer, since
                # we'll have a record that it's alive.  and by not
                # setting $newviewer, the viewer will keep re-reading
                # the same preview file.
                viewerpid=$!
            fi

            # Change focus from nsxiv, back to the terminal window
            # so that user can continue to search for fonts without
            # having to manually change focus back to the terminal window
            xdotool windowfocus "$(cat "$fp_dir/term_win_id")"
        fi
    done
}

process_args()
{
    options=$(getopt \
        --name fontpreview \
        --alternative \
        --options h \
        --long "position:,\
                size:,\
                font-size:,\
                bg-color:,\
                fg-color:,\
                preview-text:,\
                no-preview-header,\
                multi-viewer,\
                help" \
        -- "$@") || error "use -h for help"

    eval set -- "$options"

    while : option loop
    do
        : case "$1"
        case "$1" in
            --position)          preview_pos=$2; shift ;;
            --size)              preview_size=$2; shift ;;
            --font-size)         font_size=$2; shift ;;
            --bg-color)          bg_color=$2; shift ;;
            --fg-color)          fg_color=$2; shift ;;
            --preview-text)      preview_text=$2; shift ;;
            --no-preview-header) preview_fontname=; ;;
            --multi-viewer)      multi_viewer=true ;;
            -h|--help)           show_help; exit ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done
    fileargs=( "$@" )

    vieweropts+=( -g "$preview_size$preview_pos" )
}


trap on_exit EXIT

find_tools

process_args "$@"

one_shot_commands ${fileargs[0]} ${fileargs[1]}   # might not return

main

