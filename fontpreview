#!/usr/bin/env bash
#
# Siddharth Dushantha 2020
#
# Dependencies: nsxiv or sxiv, imagemagick, xdotool, fzf

exec 3>&2   # save a copy of original stderr for fzf to use
# uncomment next line to save a debug trace
# exec 2>/tmp/fontpreview.log ; set -x

VERSION=1.0.7

# Default values
SEARCH_PROMPT="❯ "
SIZE=530x730
POSITION=;   # Let the window manager choose a position.  User can override.
FONT_SIZE=38
BG_COLOR="#ffffff"
FG_COLOR="#000000"
PREVIEW_HEADER=true
PREVIEW_TEXT='\
 ABCDEFGHIJKLM\n\
 NOPQRSTUVWXYZ\n\
 abcdefghijklm\n\
 nopqrstuvwxyz\n\
 1234567890\n\
 !@$\\/%%(){}[]\n\
 .,:;=+>--<__\n\
 ({[ -~\n\
 DO08B 1Ili\n\
 AR 9gq oa\n\
 السلام عليكم \
'

show_help() {
printf "%s" "\
usage: fontpreview [-h] [--size \"px\"] [--position \"+x+y\"] [--search-prompt SEARCH_PROMPT]
                   [--font-size \"FONT_SIZE\"] [--bg-color \"BG_COLOR\"] [--fg-color \"FG_COLOR\"]
                   [--preview-text \"PREVIEW_TEXT\"] [--preview-header yes/no] [-i font.otf] [-o preview.png] [--version]
 
┌─┐┌─┐┌┐┌┌┬┐┌─┐┬─┐┌─┐┬  ┬┬┌─┐┬ ┬
├┤ │ ││││ │ ├─┘├┬┘├┤ └┐┌┘│├┤ │││
└  └─┘┘└┘ ┴ ┴  ┴└─└─┘ └┘ ┴└─┘└┴┘
Very customizable and minimal font previewer written in bash
 
optional arguments:
   -h, --help            show this help message and exit
   -i, --input           filename of the input font (.otf, .ttf, .woff are supported)
   -o, --output          filename of the output preview image (input.png if not set)
   --size                size of the font preview window
   --position            the position where the font preview window should be displayed
   --search-prompt       input prompt of fuzzy searcher
   --font-size           font size
   --bg-color            background color of the font preview window
   --fg-color            foreground color of the font preview window
   --preview-text        preview text that should be displayed in the font preview window
   --preview-header      include the font name in the preview image
   --version             show the version of fontpreview you are using
"
}

pre_exit() {
    # kill the image viewer
    test "$viewerpid" && kill -TERM $viewerpid 2>/dev/null

    # Delete tempfiles, so we don't leave useless files behind.
    rm -rf "$FONTPREVIEW_DIR"
}

wrapfontname()
{
    if [[ -f "$1" ]]
    then  # if it's a filename, just fold the basename
        fold -w 20 <<<"${1##*/}"
    else # otherwise, change '-' to space and wrap on spaces
        sed -e 's/-/ /g' <<<"$1" | fold -s -w 20
    fi
}

generate_preview(){

    fontspec=$1
    outpng=$2

    [[ $PREVIEW_HEADER == true ]] &&
	header="$(wrapfontname $fontspec)\n\n"

    # Credits: https://bit.ly/2UvLVhM
    $magick -size $SIZE xc:"$BG_COLOR" \
        -gravity center \
        -pointsize $FONT_SIZE \
        -font "$fontspec" \
        -fill "$FG_COLOR" \
        -annotate +0+0 \
            "$header$PREVIEW_TEXT" \
        "$outpng.tmp.png" &&
    mv "$outpng.tmp.png" "$outpng"
}

error(){
    echo fontpreview error: "$@" >&2
    exit 1
}

exists(){
    type -p "$1" &>/dev/null
}

main(){
    # Checking if needed dependencies are installed
    exists sxiv && sxiv=sxiv
    exists nsxiv && sxiv=nsxiv
    test "$sxiv" || error Neither nsxiv nor sxiv is available.

    exists convert && magick=convert
    exists magick && magick=magick
    test "$magick" || error Neither magick nor convert is available.

    exists xdotool || error xdotool not available
    exists fzf || error fzf not available

    # Checking for enviornment variables which the user might have set.
    # This config file for fontpreview is pretty much the bashrc, zshrc, etc
    # Majority of the variables in fontpreview can changed using the enviornment variables
    # and this makes fontpreview very customizable
    [[ $FONTPREVIEW_SEARCH_PROMPT != "" ]] && SEARCH_PROMPT=$FONTPREVIEW_SEARCH_PROMPT
    [[ $FONTPREVIEW_SIZE != "" ]] && SIZE=$FONTPREVIEW_SIZE
    [[ $FONTPREVIEW_POSITION != "" ]] && POSITION=$FONTPREVIEW_POSITION
    [[ $FONTPREVIEW_FONT_SIZE != "" ]] && FONT_SIZE=$FONTPREVIEW_FONT_SIZE
    [[ $FONTPREVIEW_BG_COLOR != "" ]] && BG_COLOR=$FONTPREVIEW_BG_COLOR
    [[ $FONTPREVIEW_FG_COLOR != "" ]] && FG_COLOR=$FONTPREVIEW_FG_COLOR
    [[ $FONTPREVIEW_PREVIEW_TEXT != "" ]] && PREVIEW_TEXT=$FONTPREVIEW_PREVIEW_TEXT
    [[ $FONTPREVIEW_HEADER != "" ]] && PREVIEW_HEADER=$FONTPREVIEW_HEADER
}

    # Save the window ID of the terminal window fontpreview is executed in.
    # This is so that when we open up nsxiv, we can change the focus back to
    # the terminal window, so that the user can search for the fonts without
    # having to manualy change the focus back to the terminal.
    xdotool getactivewindow > "$TERMWIN_IDFILE"

    while true; do
        # List out all the fonts which imagemagick is able to find, extract
        # the font names and then pass them to fzf
        font=$($magick -list font |
                awk -F: '/^[ ]*Font: /{print substr($NF,2)}' |
                fzf --query=$(cat $FONTPREVIEW_DIR/query 2>/dev/null) \
                    --preview="echo {q} > $FONTPREVIEW_DIR/query" \
                        --prompt="$SEARCH_PROMPT" 2>&3)

        # Exit if nothing is returned by fzf, which also means that the user
        # has pressed [ESCAPE]
        [[ -z $font ]] && return

        generate_preview "$font" "$FONT_PREVIEW"

        if [[ ! $viewerpid ]] || ! kill -0 $viewerpid ; then
            # Display the font preview using nsxiv
            $sxiv -N "fontpreview" -b -g "$SIZE$POSITION" "$FONT_PREVIEW" &
            viewerpid=$!

            # Change focus from nsxiv, back to the terminal window
            # so that user can continue to search for fonts without
            # having to manually change focus back to the terminal window
            xdotool windowfocus "$(cat "$TERMWIN_IDFILE")"
        fi
    done
}

# Disable CTRL-Z because if we allowed this key press,
# then the script would exit but, nsxiv would still be
# running
trap "" SIGTSTP

trap pre_exit EXIT

# Use mktemp to create a temporary directory that won't
# collide with temporary files of other application.
FONTPREVIEW_DIR="$(mktemp -d "${TMPDIR:-/tmp}/fontpreview_dir.XXXXXXXX")" || exit
FONT_PREVIEW="$FONTPREVIEW_DIR/fontpreview.png"
touch "$FONT_PREVIEW" || exit
TERMWIN_IDFILE="$FONTPREVIEW_DIR/fontpreview.termpid"
touch "$TERMWIN_IDFILE" || exit

font=$1


# Parse the arguments
options=$(getopt -o hi:o: --long position:,size:,version,search-prompt:,font-size:,bg-color:,fg-color:,preview-text:,preview-header:,input:,output:,help -- "$@")
# exit on usage errors
[[ $? == 0 ]] || error "try -h for help"

eval set -- "$options"

while true; do
    case "$1" in
        --size)
            shift
            FONTPREVIEW_SIZE=$2
            ;;
        --position)
            shift
            FONTPREVIEW_POSITION=$2
            ;;
        -h|--help)
            show_help
            exit
            ;;
        --version)
            echo $VERSION
            exit
            ;;
        -i|--input)
            input_file="$2"
            ;;
        -o|--output)
            output_file="$2"
            ;;
        --search-prompt)
            FONTPREVIEW_SEARCH_PROMPT=$2
            ;;
        --font-size)
            FONTPREVIEW_FONT_SIZE=$2
            ;;
        --bg-color)
            FONTPREVIEW_BG_COLOR=$2
            ;;
        --fg-color)
            FONTPREVIEW_FG_COLOR=$2
            ;;
        --preview-text)
            FONTPREVIEW_PREVIEW_TEXT=$2
            ;;
        --preview-header)
            case $2 in
            [yYtT1]*) FONTPREVIEW_HEADER=true ;;
            [nNfF0]*) FONTPREVIEW_HEADER=false; ;;
            esac
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done


# Point a font file to fontpreview and it will preview it.
# Example:
#   $ fontpreview /path/to/fontFile.ttf
#
# This is useful because people can preview fonts which they have not
# installed onto their system. So if they want to preview a font file that
# is in their Downloads directory, then they can easily preview it.
if [ -f "$font" ]; then
    generate_preview "$font" "$FONT_PREVIEW"

    # Display the font preview using nsxiv
    $sxiv -g "$SIZE$POSITION" -N "fontpreview" -b "$FONT_PREVIEW" &

    # For some strange reason, nsxiv just doesnt have time to read the file
    sleep 0.1
    exit
fi

# Check if the user gave an input file if they did, then create a preview
# and then save the preview to the current working directory
if [ "$input_file" != "" ] ; then
    [ -z "$output_file" ] && output_file="${input_file}.png"
    generate_preview "$input_file" "$output_file"
    exit
fi

main
